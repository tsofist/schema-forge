// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`DBML Generator basic cases 1`] = `
"// Test comment!
Project TestProject {
  database_type: 'PostgreSQL'

  note:
    '''
    Multi-line note

    > Powered by [SchemaForge]
    '''
}

// This is a comment
// Important: This is a multi-line comment
Table some_schema.some_entity_1 {
  number number [not null]
  number_array jsonb [not null]
  bigint number [not null]
  bigint_array jsonb [not null]
  bool boolean [not null]
  bool_array jsonb [not null]
  string text [not null]
  string_array jsonb [not null]
  date timestamptz [not null]
  date_array jsonb [not null]

  note:
    '''
      Description for Some Database Entity Type
      **Important**: This is a multi-line description for Some Database Entity Type
      This description may use **Markdown** syntax
    '''
}

// This is a comment
// Important: This is a multi-line comment
Table some_schema.some_entity_2 {
  ref uuid [pk, not null, note: "Some reference."]
  extra_ref uuid [pk, not null, note: "Some reference."]
  uuid uuid [not null]
  int integer [not null, note:
    '''
    Integer value.

    References:   - PostgreSQL: less than bigint and greater than integer (without NaN and +/- Infinity)
    '''
  ]
  int_array jsonb [not null]
  float number [not null, note: "Floating-point number."]
  float_array jsonb [not null]
  complex jsonb [not null, note: "Easy version of Record type"]
  complex_array jsonb [not null]

  indexes {
    (ref) [name: "ix_some_schema_some_entity_2_ref", unique]
    (extra_ref) [name: "ix_some_schema_some_entity_2_extraRef", unique]
  }

  note:
    '''
      Description for Some Database Entity Type
      **Important**: This is a multi-line description for Some Database Entity Type
      This description may use **Markdown** syntax
    '''
}

Table some_schema.some_entity_3 {
  int integer [not null, note:
    '''
    Integer compatibility type.

    References:   - PostgreSQL: integer
    '''
  ]
  bigint integer [not null, note:
    '''
    Big integer compatibility type.

    References:   - PostgreSQL: bigint
    '''
  ]
  smallint integer [not null, note:
    '''
    Small integer compatibility type.

    References:   - PostgreSQL: smallint
    '''
  ]
  float text [not null, note:
    '''
    Safe exact floating-point number.

    References:   - PostgreSQL: float8, double precision, numeric(30,18)
    '''
  ]
  money text [not null, note:
    '''
    String representation of a floating point number with up to 2 decimal places.

    References:   - PostgreSQL: usual numeric(12,2) or up to numeric(15,2)
    '''
  ]
}

Table some_schema.some_entity_5 {
  uid uuid [not null]
  zdt text [not null, note:
    '''
    ISO zulu date-time string (GMT time zone).

    Rules:
    * Date: YES
    * Time: YES
    * UTC offset: NO
    * Milliseconds: Optional
    '''
  ]
  ldt text [not null, note:
    '''
    ISO local date-time string.

    Rules:
    * Date: YES
    * Time: YES
    * UTC offset: Optional
    * Milliseconds: Optional
    '''
  ]
  ld text [not null, note:
    '''
    ISO local date string.

    Rules:  * Date: YES  * Time: NO  * UTC offset: NO  * Milliseconds: NO
    '''
  ]
  zd text [not null, note:
    '''
    ISO zulu date-time string (GMT time zone).

    Rules:
    * Date: YES
    * Time: YES
    * UTC offset: NO
    * Milliseconds: Optional
    '''
  ]
  pi integer [not null, note: "Positive integer value."]
  pf number [not null, note: "Positive floating-point number."]
  psf text [not null, note:
    '''
    Safe positive floating-point number.

    References:   - PostgreSQL: float8, double precision, numeric(30,18)
    '''
  ]
  ci integer [not null, note:
    '''
    Integer compatibility type.

    References:   - PostgreSQL: integer
    '''
  ]
  cnnbi integer [not null, note:
    '''
    Non-negative big integer compatibility type.

    References:   - PostgreSQL: bigint
    '''
  ]
  csni integer [not null, note:
    '''
    Negative small integer compatibility type.

    References:   - PostgreSQL: smallint
    '''
  ]
}

// Test comment for TestScope
TableGroup TestScope {
  some_schema.some_entity_1
  some_schema.some_entity_2
  some_schema.some_entity_3
  some_schema.some_entity_5
}
"
`;

exports[`DBML Generator index meta cases 1`] = `
"Project Scratch {
  database_type: 'PostgreSQL'
}

Table some_schema.ix_01 {
  index00 number [not null]
  indexed01 number [not null]
  indexed02 number [not null]

  indexes {
    (index00) [name: "ix_some_schema_ix_01_index00"]
    (indexed01) [name: "ix_some_schema_ix_01_indexed01", note: "This is a single-line note for Index"]
    (indexed02) [name: "ix_some_schema_ix_01_indexed02", note:
      '''
      This is a multiline-line note for Index
      Yep, this is true
      ''']
  }
}
"
`;

exports[`DBML Generator table meta cases 1`] = `
"Project Scratch {
  database_type: 'PostgreSQL'
}

// This is a comment
// Important: This is a ***multi-line comment***
Table some_schema.some_entity_10 {
  stub text [not null]
}

// This is a single-comment
Table some_schema.some_entity_11 {
  stub text [not null]
}

// This is a multi-comment
// This is a different kind of multi-line comment
Table some_schema.some_entity_12 {
  stub text [not null]
}

// V2
// This is a comment
// Important: This is a multi-line comment
//
// Outlined description
Table some_schema.some_entity_13 {
  stub text [not null]

  note:
    '''
    V2
    Description for Some Database Entity Type
    **Important**: This is a multi-line description for Some Database Entity Type
    This description may use **Markdown** syntax
    '''
}

Table some_schema.some_entity_6 {
  stub text [not null]

  note: "Single line description via '@description' tag"
}

Table some_schema.some_entity_7 {
  stub text [not null]

  note: "Inline description"
}

Table some_schema.some_entity_8 {
  stub text [not null]

  note:
    '''
    tag
    Description for Some Database Entity Type
    **Important**: This is a multi-line description for Some Database Entity Type
    This description may use **Markdown** syntax
    '''
}

Table some_schema.some_entity_9 {
  stub text [not null]

  note:
    '''
    Inline Multi-line description. Description for Some Database Entity Type
    **Important**: This is a multi-line description for Some Database Entity Type This description may use **Markdown** syntax
    '''
}
"
`;
